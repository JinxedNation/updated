#ifndef TIME_H
#define TIME_H

#include "fstream"
#include "iostream"
using namespace std;

class Time
{
public:
    Time();
    Time(int temp_Hour, int temp_Minute, int temp_Second);
   ~Time();


    /******************************************************************************************************************************************************************************************************************************************************
     * @brief   : get_The_Hour
     * @brief   : gets the m_The_Hour
     *
     * @param   : void
     * @return  : m_Current_Hour (const int)
     ******************************************************************************************************************************************************************************************************************************************************/

unsigned  get_The_Hour() const;


    /******************************************************************************************************************************************************************************************************************************************************
     * @brief   : set_The_Hour
     * @brief   : sets m_The_Hour with temp_Hour
     *
     *
     * @param   : temp_Hour (int)
     * @return  : void
     ******************************************************************************************************************************************************************************************************************************************************/

void set_The_Hour(unsigned temp_Hour);


    /******************************************************************************************************************************************************************************************************************************************************
     * @brief  : get_The_Minute
     * @brief  : gets the minute
     *
     *
     * @param  : void
     * @return : m_The_Minute (const int)
     ******************************************************************************************************************************************************************************************************************************************************/

unsigned  get_The_Minute() const;


    /******************************************************************************************************************************************************************************************************************************************************
     *@brief     set_The_Minute
     *@brief   : sets the minute with temp_Minute
     *
     *@param   : temp_Minute (int)
     *@return  : void
     ******************************************************************************************************************************************************************************************************************************************************/

void set_The_Minute(unsigned temp_Minute);



    /******************************************************************************************************************************************************************************************************************************************************
     *@brief     get_The_Second
     *@brief   : gets the second
     *
     *
     *@param   : void
     *@return  : m_The_Second (const int )
     ******************************************************************************************************************************************************************************************************************************************************/

unsigned get_The_Second() const;


    /******************************************************************************************************************************************************************************************************************************************************
     *@brief     set_The_Second
     *@brief   : sets m_The_Second with temp_Second
     *
     *
     *@param   : int temp_The_Second
     *@return  : void
     ******************************************************************************************************************************************************************************************************************************************************/

void set_The_Second(unsigned temp_Second);




private:
    ///
    unsigned m_The_Hour;

    ///
    unsigned m_The_Minute;

    ///
    unsigned m_The_Second;
};


	/******************************************************************************************************
	 * @brief   : std::ostream operator
	 * @brief   : overloads ostream operator to write Date objects
	 *
	 *
	 * @param   : output_s (std::ostream& ), recorded_Time (const Time&)
	 * @return  : output_s (ostream)
	 *******************************************************************************************************/

std::ostream& operator <<(std::ostream& output_s, const Time& recorded_Time);



	/******************************************************************************************************
	 * @brief   : istream operator
	 * @brief   : overloads the istream operator to read Date objects
	 *
	 *
	 * @param   : input (std::istream& ), recorded_Time (Time& )
	 * @return  : input
	 *******************************************************************************************************/

std::istream& operator >>(std::istream& input, Time& recorded_Time);
#endif // TIME_H